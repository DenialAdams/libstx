.TH libistr 3 libistr\-VERSION
.SH NAME
libistr \- Improved String Library
.SH SYNOPSIS
.B #include <libistr.h>
.PP
.B typedef struct 
.I istring istring;
.SH DESCRIPTION
The istring library (hereafter referred to as libistr) is an efficient and 
simple dynamic string library for C. It provides the istring structure and 
functions that operate on them. istrings are fully compatible with the 
standard ANSI C <string.h> style functions, as libistr will always make sure 
an istring ends with a NULL byte at the end of the data it contains.
As a bonus, istrings can be used to hold arbitrary values, including 0.
.PP
libistr includes utf8 helper functions that let unicode characters be
manipulated by the number of unicode characters rather than the size in bytes.
.PP
Memory allocation for istrings is also efficient, as the scheme for increasing
an istring's size is to keep it as a power of two e.g. 32, 64, 512.
.PP
.SH FUNCTIONS
.TP
.B istring* istr_new(const istring *src)
Initialize a new istring. If
.I src
is NULL return an empty istring. Otherwise copy the contents of
.I src
to initialize and return an istring. If allocation failed
errno =
.I ENOMEM
and return NULL.
.TP
.B istring* istr_new_bytes(const char *bytes, size_t bytes_len)
Initialize a new istring. If
.I bytes
is NULL and
.I bytes_len
is 0, return an empty istring. Otherwise copy 
.I bytes_len
of
.I bytes
to initialize and return an istring. If allocation failed,
errno =
.I ENOMEM
and return NULL.
.TP
.B istring* istr_new_cstr(const char *cstr)
Initialize a new istring. If
.I cstr
is NULL return an empty istring. Otherwise copy the contents of
.I cstr
until the first '\0' character and return an istring. If allocation failed,
errno =
.I ENOMEM
and return NULL.
.TP
.B char* istr_free(istring *string, bool free_buf)
Free all memory used by an istring. If
.I free_buf
is true, then free the string buffer inside the istring and return NULL. 
Otherwise return the buffer. If 
.I string
is NULL errno =
.I EINVAL
and return NULL.
.TP
.B int istr_eq(const istring *s1, const istring *s2)
Check for equality between two istrings. 
If equal return 0. If not equal return 1. If either argument is NULL, errno =
.I EINVAL
and return -1.
.TP
.B istr_slice
Copy a slice of characters from one string to another.
.TP
.B istr_assign_bytes
Reassign an istring's contents to arbitrary bytes, rewriting any old contents.
.TP
.B istr_assign_cstr
Reassign an istring's contents to a string with a terminating null-byte.
.TP
.B istr_truncate
Shorten the istring to a specified length.
.TP
.B istr_pop_byte
Remove the last byte in an istring and returns it.
.TP
.B istr_write
Overwrite an istring at an index with another istring.
.TP
.B istr_write_bytes
Overwrite an istring at an index with arbitrary bytes.
.TP
.B istr_prepend
Prepend a copy of an istring to another istring.
.TP
.B istr_prepend_bytes
Prepend arbitrary bytes onto an istring.
.TP
.B istr_append
Append a copy of an istring to another istring.
.TP
.B istr_append_bytes
Append arbitrary bytes onto an istring.
.TP
.B istr_append_cstr
Append a c-style string with a terminating null-byte to an istring.
.TP
.B istr_insert
Insert an istring into an istring at an index without overwriting.
.TP
.B istr_insert_bytes
Insert arbitrary bytes into an istring at an index without overwriting.
.SH CONFORMING TO
The
.I libistr
library is guaranteed to conform with C99 or later
.SH AUTHOR
Written by Todd O. Gaunt
