/**
 * oystr_avail() - Check how much space is available in an oystr.
 * @s1               The oystr to validate.
 *
 * The space leftover is the amount of uninitialized memory after any
 * initialized memory in the oystr buffer.
 *
 * Return: The amount of unused space in an oystr buffer.
 */

/**
 * oystr_deinit() - Deinitialize an oystr.
 * @s1                The oystr to deinitialize.
 * 
 * The oystr is deinitialized by freeing all fields that could reference
 * allocated memory and then setting them to NULL. All other fields are simply
 * set to 0.
 *
 * 's1->buf' must either be NULL or malloc'd memory, otherwise behavior is
 * undefined.
 */

/**
 * oystr_valid() - Validate the fields of an oystr.
 * @s1               The oystr to validate.
 *
 * Validation is useful if dealing with an oystr where the caller may not be 
 * sure if the oystr was modified properly or not.
 *
 * Return: true if 's1->size' > 0,
 *                 's1->len' < 's1->size',
 *                 's1->buf' != NULL.
 *         false if otherwise.
 */

/**
 * oystr_set_len - Change the length of an oystr and '\0'-terminate it.
 * @s1               The oystr to modify.
 * @len              The length that 's1->len' will be set to.
 *
 * Return: OYSTR_ERR If 'len' > 's1->size' - 1.
 *         OYSTR_OK otherwise.
 */

/**
 * oystr_eq() - Compare two oystrs for equality.
 * @s1            The first oystr to compare.
 * @s2            The second oystr to compare.
 *
 * Returns false if the contents of @s1.buf are not the same as @s1.buf,
 * otherwise returns true.
 */

/**
 * Swap the contents of two oystrs.
 *
 * This function is equivalent to just assigning two structs to one another
 * while using a temporary struct as a buffer.
 */

/**
 * Truncate @s1 by @len bytes.
 *
 * Returns the last character truncated. If @len > @s1.len, @s1.len is set to 0
 * and '\0' is returned.
 */

/**
 * Assign the contents of @bytes to @s1.
 *
 * If @s1.buf doesn't not contain enough room to hold @bytes, @s1.buf will be
 * reallocated. Returns ISTR_ERR upon any reallocation error, otherwise returns
 * ISTR_OK.
 */

/**
 * Assign the contents of @s2 to @s1.
 * 
 * A convenience wrapper around oystr_assign.
 */

/**
 * Write @bytes directly over @s1 starting at index @pos.
 *
 * This function overwrites bytes directly, and doesn't make any calls to
 * memmove. If the bytes being written would extend beyond @s1.buf, then @s1.buf
 * is reallocated.
 *
 * Returns ISTR_ERR upon allocation failure, otherwise ISTR_OK.
 */

/**
 * Write @s2 directly over @s1 starting at index @pos.
 *
 * A convenience wrapper around oystr_write.
 */
